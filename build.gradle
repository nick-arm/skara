/*
 * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

buildscript {
    def deps = [:]
    file('deps.env').readLines().each() {
        def (key, value) = it.tokenize('=')
        if (key != null && value != null) {
            deps[key] = value.replaceAll(/^\"|\"$/, '')
        }
    }

    ext {
        def os = System.getProperty('os.name').toLowerCase()
        osName = os.startsWith('win') ? 'Windows' :
            os.startsWith('mac') ? 'Macos' : 'Linux'

        def jdks = [
            'Windows': [
                'amd64': [
                    url: deps['JDK_WINDOWS_URL'],
                    sha256: deps['JDK_WINDOWS_SHA256']
                ],
            ],
            'Linux': [
                'amd64': [
                    url: deps['JDK_LINUX_X86_64_URL'],
                    sha256: deps['JDK_LINUX_X86_64_SHA256']
                ],
                'aarch64': [
                    url: deps['JDK_LINUX_AARCH64_URL'],
                    sha256: deps['JDK_LINUX_AARCH64_SHA256']
                ],
            ],
            'Macos': [
                'x86_64': [
                    url: deps['JDK_MACOS_URL'],
                    sha256: deps['JDK_MACOS_SHA256']
                ],
            ],
        ]

        if (osName in jdks) {
            def arch = System.getProperty('os.arch')
            if (arch in jdks[osName]) {
                jdkUrl = jdks[osName][arch].url
                jdkSha256 = jdks[osName][arch].sha256
            } else {
                throw new GradleException("Unsupported architecture: ${arch}")
            }
        } else {
            throw new GradleException("Unsupported OS: ${os}")
        }
    }
}

plugins {
    id 'org.openjdk.skara.gradle.proxy'
    id 'org.openjdk.skara.gradle.version'
    id 'org.openjdk.skara.gradle.reproduce'
}

configure(subprojects.findAll() { it.name != 'bots' }) {
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'org.openjdk.skara.gradle.module'
    apply plugin: 'org.openjdk.skara.gradle.version'

    group = 'org.openjdk.skara'

    repositories {
        mavenLocal()
        maven {
            url System.getProperty('maven.url', 'https://repo.maven.apache.org/maven2/')
        }
    }

    dependencies {
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.2'
        testImplementation 'org.junit.jupiter:junit-jupiter-params:5.5.2'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.5.2'
        // Force Gradle to load the JUnit Platform Launcher from the module-path, as
        // configured in buildSrc/.../ModulePlugin.java -- see SKARA-69 for details.
        testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.5.2'
    }

    compileJava.options.encoding = 'UTF-8'
    compileTestJava.options.encoding = 'UTF-8'

    test {
        useJUnitPlatform()

        if (findProperty('credentials')) {
            systemProperty "credentials", findProperty('credentials')
        }

        testLogging {
            events "passed", "skipped", "failed"
            exceptionFormat "full"
        }
    }

    publishing {
        repositories {
            maven {
                url = findProperty('mavenRepositoryUrl')
                credentials {
                    username = findProperty('mavenRepositoryUser')
                    password = findProperty('mavenRepositoryPassword')
                }
            }
        }
    }

    gradle.taskGraph.whenReady { graph ->
        if (graph.hasTask(publish) && !findProperty('mavenRepositoryUrl')) {
            throw new GradleException("To publish artifacts, set the maven repository url -PmavenRepositoryUrl=<url>")
        }
        if (graph.hasTask(publish) && !findProperty('mavenRepositoryUser')) {
            throw new GradleException("To publish artifacts, set the maven repository user name -PmavenRepositoryUser=<user>")
        }
        if (graph.hasTask(publish) && !findProperty('mavenRepositoryPassword')) {
            throw new GradleException("To publish artifacts, set the maven repository password -PmavenRepositoryPassword=<password>")
        }
    }
}

task test {
    subprojects.findAll() { !it.getTasksByName('test', false).isEmpty() }.each { dependsOn "${it.path}:test" }
}

task clean {
    subprojects.findAll() { !it.getTasksByName('clean', false).isEmpty() }.each { dependsOn "${it.path}:clean" }
}

reproduce {
    dockerfile = 'test.dockerfile'
}

task local(type: Copy) {
    doFirst {
        delete project.buildDir
    }

    dependsOn ':cli:image' + project.osName
    from zipTree(file(project.rootDir.toString() +
                      '/cli/build/distributions/cli' +
                      '-' + project.version + '-' +
		      osName.toLowerCase() + '.zip'))
    into project.buildDir
}

defaultTasks 'local'
